{"diagram":{"image":{"height":200,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","width":200,"y":0,"x":0},"elements":{"id":"root","title":"jQuery","structure":"mind_right","leftChildren":[],"root":true,"theme":"jianbihua","children":[{"id":"158196032e9fef99","title":"MyJquery目录结构","parent":"root","children":[{"id":"1560636e6d8c777","title":"src/ 主要代码","parent":"158196032e9fef99","children":[{"id":"1560636e6d862c38","title":"init.js 初始化","parent":"1560636e6d8c777","children":[{"id":"15818b574bda8965","tags":[{"text":"jQuery.fn.init 实现","color":"rgb(255, 255, 255)","background":"rgb(113, 203, 45)"}],"title":"jQuery对象的创建","parent":"1560636e6d862c38","children":[],"note":"```\nvar init = function(jQuery){\n    jQuery.fn.init = function (selector, context, root) {\n        if (!selector) {\n            return this;\n        } else {\n            // var elem = document.querySelector(selector);\n            var elemList = jQuery.find( selector );\n            if ( elemList.length ) {\n                // this[0] = elem;\n                // this.length = 1;\n                jQuery.merge( this, elemList );\n            }\n            \n            return this;\n        }\n    };\n\n    jQuery.fn.init.prototype = jQuery.fn;\n};\n\n```"}],"icons":[{"index":"0","name":"priority"}]},{"id":"1560636e6d89a260","title":"core.js 核心部分","parent":"1560636e6d8c777","children":[{"id":"15818ba900764739","title":"jQuery.version 版本信息","parent":"1560636e6d89a260","children":[]},{"id":"15818b9c86f25914","tags":[{"text":"jQuery原型实现","color":"rgb(255, 255, 255)","background":"rgb(113, 203, 45)"}],"title":"jQuery.fn 和 jQuery.prototype","parent":"1560636e6d89a260","children":[{"id":"15819c9eefa8bc54","tags":[{"text":"入栈操作","color":"rgb(255, 255, 255)","background":"rgb(255, 159, 26)"}],"title":"jQuery.fn.pushStack 入栈操作","parent":"15818b9c86f25914","children":[],"note":"- jQuery对象的入栈操作，使得在查询对象的时候，可以保存链式结构中上一个查询的结果\n\n```\npushStack: function ( elems ) {\n\n    \t// elems数组转成类数组对象\n    \tvar ret = jQuery.merge( this.constructor(), elems );\n\n    \t// 关系链处理，新jQuery对象的属性指向旧的对象\n    \t// 达到保存前一个对象的功能\n    \tret.preObject = this;\n\n    \treturn ret;\n    },\n\n```"}],"note":"```\n\n\njQuery.fn = jQuery.prototype = {\n    jquery: version,\n    length: 0, // 增加长度属性，方便数组到类数组对象的转换\n    constructor: jQuery,\n    \n   \t/**\n   \t * 入栈操作\n   \t *\n   \t * @param  {[Array]} elems [DOM元素数组]\n   \t * @return {[type]}       [description]\n   \t */\n    pushStack: function ( elems ) {\n\n    \t// elems数组转成类数组对象\n    \tvar ret = jQuery.merge( this.constructor(), elems );\n\n    \t// 关系链处理，新jQuery对象的属性指向旧的对象\n    \t// 达到保存前一个对象的功能\n    \tret.preObject = this;\n\n    \treturn ret;\n    },\n\n\n    setBackground: function(){\n        this[0].style.background = 'yellow';\n        return this\n    },\n    setColor: function(){\n        this[0].style.color = 'blue';\n        return this\n    }\n};\n```"},{"id":"15818bae72cafa68","tags":[{"text":"实例和原型扩展实现","color":"rgb(255, 255, 255)","background":"rgb(113, 203, 45)"}],"title":"jQuery.extend 实例扩展","parent":"1560636e6d89a260","children":[{"id":"15818c1565700a0","tags":[{"text":"返回传入参数的类型字符串","color":"rgb(255, 255, 255)","background":"rgb(255, 159, 26)"}],"title":"jQuery.type( obj ) 获取对象类型","parent":"15818bae72cafa68","children":[],"note":"```\n// 获取类型\n\ttype: function ( obj ) {\n\t\tif ( obj == null ) {\n\t\t\treturn obj + \"\"; // undefined or null\n\t\t}\n\n\t\treturn ( typeof obj === 'object' || typeof obj === 'function' )  // 非基础类型\n\t\t\t\t// 在类型对象中找不到标识方式，则直接用'object'\n\t\t\t\t? class2type[ toString.call( obj ) ] || 'object' \n\t\t\t\t// 基础类型，直接用typeof即可\n\t\t\t\t: typeof obj;\n\t}\n```"},{"id":"15818c307600792","tags":[{"text":"通过jQuery.type即可获取函数类型字符串","color":"rgb(255, 255, 255)","background":"rgb(255, 159, 26)"}],"title":"jQuery.isFunction( obj ) 函数判断","parent":"15818bae72cafa68","children":[]},{"id":"15818c471588e655","tags":[{"text":"普通对象：new 或 {} 创建的","color":"rgb(255, 255, 255)","background":"rgb(255, 159, 26)"}],"title":"jQuery.isPlainObject( obj ) 普通对象判断","parent":"15818bae72cafa68","children":[],"note":"```\nisPlainObject: function ( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// 非对象判断\n\t\tif ( !obj || ( toString.call( obj ) !== '[object Object]' ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// 获取prototype\n\t\tproto = getProto( obj );\n\n\t\t// 因为通过 {} 字面量创建的对象是没有prototype的\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// 简单对象的构造函数等于最顶层Object的构造函数\n\t\tCtor = hasOwn.call( proto, 'constructor' ) && proto.constructor;\n\n\t\t// 由于PlainObject为 {} 或者通过new创建的对象\n\t\t// 上面已经通过prototype属性判断了是否为 {} 形式创建的对象，因为{}创建的对象是没有原型的\n\t\t// 这里的判断是通过new 创建的对象\n\t\t// \t1. 首先函数，有原型prototype，原型里有构造函数constructor，通过上面一句获取出的是函数\n\t\t// \t   的构造函数，如果没有则为'false'(按逻辑值是不会为false的)，下面也就返回false，\n\t\t// \t2. 上面成立，则会Ctor就会保存原型中的构造函数对象，那么Ctor的typeof也就是'function'，\n\t\t// \t   下面的&&前面是成立的，&&后面是从类型对象中去寻找是否有'function'的类型，找到了与\n\t\t// \t   'Object'对象调用'toString'后的结果相比较\n\t\treturn typeof Ctor === 'function' && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n```"},{"id":"15818c542b8acb67","tags":[{"text":"直接通过Array对象的isArray属性","color":"rgb(255, 255, 255)","background":"rgb(255, 159, 26)"}],"title":"jQuery.isArray( obj ) 数组判断","parent":"15818bae72cafa68","children":[],"note":"```\nreturn Array.isArray;\n```"},{"id":"15818c6549682250","tags":[{"text":"将second扩展成first的类数组对象","color":"rgb(255, 255, 255)","background":"rgb(255, 159, 26)"}],"title":"jQuery.merge( first, second )&nbsp;","parent":"15818bae72cafa68","children":[],"note":"```\n// 原理并不复杂，主要是第一个参数的判断，以及其长度的运用，如果是数组，那么就会在自由的长度之上，在数组后面进行追加；如果是对象，那么保证第一个对象拥有：length属性的条件下，将该长度值累加之后成为对象成员的'key'，那么第二个参数里对应的数据作为'value'扩展到第一个对象上去。\n\nmerge: function ( first, second ) {\n\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length; // 被扩展的对象的长度属性\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\t// 用被扩展对象的长度属性值自加作为键，\n\t\t\t// 值为对应的被合并的数组中的元素\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\t// 更新被扩展的对象长度属性值\n\t\tfirst.length = i;\n\n\t\t// 返回扩展后的对象\n\t\treturn first;\n\t}\n```"}],"note":"```\njQuery.extend = jQuery.fn.extend = function () {\n\t/*\n\t\t根据参数去判断，是否需要深拷贝，一般第一个参数如果是Boolean型，\n\t\t则指定拷贝类型，然后第二个参数才是要拷贝的对象\n\t */\n\tvar options, name, clone, copy, src, copyIsArray, \n\t\ttarget = arguments[0] || {}, // 被拷贝的对象\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\n\t// 第一参数为布尔型，则为是否深拷贝\n\tif ( typeof target === 'Boolean' ) {\n\t\tdeep = target;\n\n\t\t// 被拷贝的对象往后挪\n\t\ttarget = arguments[i] || {};\n\t\ti++;\n\t}\n\n\t// target为非对象处理 [MOD-1]\n\tif ( typeof target !== 'object' && !jQuery.isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// target 后没有参数了，则扩展jQuery自身\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--; // 回去取最初的target，因为此时target成了被拷贝的对象了\n\t}\n\n\n\t// 拷贝过程\n\tfor ( ; i < length; i++ ) {\n\t\t// 开始拷贝\n\n\t\t// 只处理源对象不为 null/undefined 情况\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\t\t\t// 真正开始扩展，进行拷贝的地方\n\t\t\t\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ]; // 源对象属性\n\t\t\t\tcopy = options[ name ]; // 被拷贝的对象属性\n\n\t\t\t\t// 避免自己合自己导致死循环\n\t\t\t\tif ( src === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// [MOD-2]\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) || \n\t\t\t\t\t( copyIsArray = jQuery.isArray( copy ) ) ) ) {\n\n\t\t\t\t\t// 数组\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t\t// 被合并的对象不是数组，则设置为数组\n\t\t\t\t\t\tclone = src && jQuery.isArray( src ) ? src : [];\n\t\t\t\t\t} else { // 对象\n\n\t\t\t\t\t\t// 被合并对象不是对象，则设置为对象\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// 递归直到最内层的属性值为非对象，再保存属性值\n\t\t\t\t\ttarget [ name ] = jQeury.extend( deep, clone, copy );\n\t\t\t\t} else if ( copy !== undefined ) { // 前拷贝或者非对象或非数组\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 返回修改后的目标对象\n\treturn target;\n};\n\n```\n","collapsed":false},{"id":"15818bb2e871166","tags":[],"title":"jQuery.fn.exntend 原型扩展","parent":"1560636e6d89a260","children":[{"id":"15819711c8ba5764","tags":[{"text":"通过返回查询后的结果对象支持链式结构","color":"rgb(255, 255, 255)","background":"rgb(255, 159, 26)"}],"title":"jQuery.fn.find( selector ) 支持链式结构","children":[],"parent":"15818bb2e871166","note":"```\nfind: function ( selector ) { // 链式支持find\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\t// 先进行入栈，保存下原先的对象\n\t\t// 执行下入栈作用主要有二：\n\t\t// 1. 元素数组转换成类数组对象；\n\t\t// 2. 保存查找之前的对象；\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[i], ret );\n\t\t}\n\n\t\t// 也可以在返回之前执行入栈处理\n\t\t// 比如：return this.pushStack( ret );\n\t\t// 但是在这里执行的时候 ret 里面可能包含了多个DOM元素对象了\n\t\t// 操作起来肯定比在前面使用 '[]' 时执行耗时，性能相对较差\n\t\treturn ret;\n\t}\n```"},{"id":"15819c8b948c1e75","title":"jQuery.fn.end() 链式中上一个查询结果","children":[],"parent":"15818bb2e871166"},{"id":"15819cbc147a8b65","title":"jQuery.fn.eq( i ) 指定索引查询，支持参数为负数<br>返回的是 jQuery 对象","parent":"15818bb2e871166","children":[]},{"id":"15819cce4d9d482","title":"jQuery.fn.get( num ) 直接返回DOM对象","parent":"15818bb2e871166","children":[]},{"id":"15819d0732dd7884","title":"jQuery.fn.first()","parent":"15818bb2e871166","children":[]},{"id":"15819d0b6342d617","title":"jQuery.fn.last()","parent":"15818bb2e871166","children":[]}],"collapsed":false},{"tags":[{"text":"类型字符串","color":"rgb(255, 255, 255)","background":"rgb(113, 203, 45)"}],"id":"15818bbbc9089753","title":"class2type 类型转换对象","parent":"1560636e6d89a260","children":[],"note":"```\n\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \").forEach(function(name){\n    class2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n});\n\n```"}],"icons":[{"index":"1","name":"priority"}]},{"id":"1560636e6d8e6d90","tags":[{"text":"包含命名冲突，模块化检测等","color":"rgb(255, 255, 255)","background":"rgb(99, 171, 247)"}],"title":"global.js 全局属性方法","parent":"1560636e6d8c777","children":[],"icons":[{"index":"2","name":"priority"}],"note":"```\nvar global = function(jQuery){\n    //走模块化形式的直接绕过\n    if(typeof module === 'object' && typeof module.exports !== 'undefined') return;\n\n    var _jQuery = window.jQuery,\n        _$ = window.$;\n\n    jQuery.noConflict = function( deep ) {\n        //确保window.$没有再次被改写\n        if ( window.$ === jQuery ) {\n            window.$ = _$;\n        }\n\n        //确保window.jQuery没有再次被改写\n        if ( deep && window.jQuery === jQuery ) {\n            window.jQuery = _jQuery;\n        }\n\n        return jQuery;  //返回 jQuery 接口引用\n    };\n\n    window.jQuery = window.$ = jQuery;\n};\n\nexport default global;\n```"},{"id":"1560636e6d8b8d72","tags":[{"text":"公用变量封装.","color":"rgb(255, 255, 255)","background":"rgb(99, 171, 247)"}],"title":"var.js 变量转换","parent":"1560636e6d8c777","children":[],"icons":[{"index":"3","name":"priority"}],"note":"### 内含一些公用的变量声明和原生API的封装\n\n```\nexport var class2type = {}; // 保存各类型的属性字符串\n\nexport const toString = class2type.toString; // 等价于Object.prototype.toString()\n\nexport const getProto = Object.getPrototypeOf; \n\nexport const hasOwn   = class2type.hasOwnProperty;\n\nexport const fnToString = hasOwn.toString; // ==> Object.toString 或 Function.toString\n\nexport const ObjectFunctionString = fnToString.call( Object ); // PlainObject, 简单对象，通过{}或者new创建的对象\n```"},{"id":"1560636e6d86c942","tags":[{"text":"打包时的入口文件","color":"rgb(255, 255, 255)","background":"rgb(99, 171, 247)"}],"title":"jquery.js 入口文件","parent":"1560636e6d8c777","children":[],"icons":[{"index":"4","name":"priority"}],"note":"### 主要包含三个功能\n\n1. 导入模块：import * from 'fileName';\n2. 初始化模块数据；\n3. 导出jQuery。\n\n```\nimport jQuery from './core';\nimport global from './global';\nimport init from './init';\nimport sizzleInit from './sizzle/init';\n\nglobal( jQuery );\ninit( jQuery );\nsizzleInit( jQuery );\n\nexport default jQuery;\n```"}],"icons":[{"index":"28","text":"&#xe67e","color":"rgb(191, 30, 27)","name":"flag"}],"collapsed":false},{"id":"1581960ce2386752","title":"rel/ 出口","parent":"158196032e9fef99","children":[{"id":"15818b39642dda86","title":"jquery.js 出口文件，由打包工具生成，<br>需要jQuery框架时，用&lt;script&gt;引入","children":[],"parent":"1581960ce2386752"}],"icons":[{"index":"29","color":"rgb(255, 159, 26)","name":"flag"}]},{"id":"1560636e6d877246","title":"rollup.js 打包功能","parent":"158196032e9fef99","children":[{"id":"1581963bd6c82d51","tags":[{"text":"rollup配置","color":"rgb(255, 255, 255)","background":"rgb(99, 171, 247)"}],"title":"rollup.config.js 打包工具配置文件","parent":"1560636e6d877246","children":[],"note":"```\n// 加载rollup模块\nvar rollup      = require( 'rollup' );\n\n// 加载rollup插件‘babel’，该插件可以让代码支持ES5的最新功能\nvar babel       = require( 'rollup-plugin-babel' );\n\nrollup.rollup( {\n        entry: 'src/jquery.js',\n        plugins: [ babel() ]\n} ).then( function ( bundle ) {\n        bundle.write( {\n                format: 'umd',\n                moduleName: 'jQuery',\n                dest: 'rel/jquery.js'\n        } );\n} );\n```"},{"id":"158196775250a13","tags":[{"text":"JSON插件","color":"#276F86","background":"#d6f0f8"}],"title":"package.json","parent":"1560636e6d877246","children":[],"note":"\n{\n  \"name\": \"my-rollup-project\",\n  \"version\": \"1.0.0\"\n}\n"}],"icons":[{"index":"46","text":"&#xe693","name":""}]}]}],"lines":{"15819d124fd32419":{"to":"15819cbc147a8b65","id":"15819d124fd32419","start":{"index":3,"p":{"y":18.17335,"x":"w"},"y":131.50673,"x":129},"styles":{"lineColor":"#ff9f1a","color":"#ffffff","lineWidth":2},"label":"eq( 0 )","points":[{"y":145.11804,"x":367.99994},{"y":7.5415435,"x":516.3749}],"from":"15819d0732dd7884","angle":357.67346,"end":{"index":2,"p":{"y":6.2498026,"x":"w"},"y":15.750197,"x":321},"canvasPos":{"w":516.3749,"h":145.11804,"y":9998.4375,"x":10966.111}},"15819d250b0bd273":{"id":"15819d250b0bd273","to":"15819cbc147a8b65","start":{"index":2,"p":{"y":7.3709,"x":"w"},"y":169.35133,"x":123},"styles":{"lineColor":"#ff9f1a","color":"#ffffff","lineWidth":2},"label":"eq( -1 )","from":"15819d0b6342d617","points":[{"y":98.89225,"x":708.8263},{"y":8.118042,"x":449.99994}],"end":{"index":2,"p":{"y":7.6962166,"x":"w"},"y":14.303783,"x":321},"angle":357.25467,"canvasPos":{"w":708.8263,"y":9998.4375,"h":191.22223,"x":10966.111}},"15819d23d000582":{"to":"15819d0b6342d617","id":"15819d23d000582","start":{"index":3,"p":{"y":"h"},"y":29},"styles":{"lineColor":"rgb(113, 203, 45)","color":"#ffffff","lineWidth":2},"points":[{"y":29},{"y":29}],"from":"15819d0b6342d617","end":{"index":3,"p":{"y":"h"},"y":29},"canvasPos":{"w":123,"h":29,"y":10160.66,"x":10966.111}},"15819d22f002df17":{"id":"15819d22f002df17","to":"15819d0b6342d617","start":{"index":3,"p":{"y":"h"},"y":29},"styles":{"lineColor":"rgb(113, 203, 45)","color":"#ffffff","lineWidth":2},"from":"15819d0b6342d617","points":[{"y":29},{"y":29}],"end":{"index":3,"p":{"y":"h"},"y":29},"canvasPos":{"w":123,"y":10160.66,"h":29,"x":10966.111}},"15819d8443205e2":{"to":"15818c1565700a0","id":"15819d8443205e2","start":{"index":2,"p":{"y":5.244831,"x":"w"},"y":94.58852,"x":282},"styles":{"lineColor":"#ff9f1a","color":"#ffffff","lineWidth":2},"label":"type( obj ) === \"function\"","points":[{"y":87.74652,"x":465.93744},{"y":26.288507,"x":367.54153}],"from":"15818c307600792","angle":359.95044,"end":{"index":3,"p":{"y":26.623795,"x":"w"},"y":26.623795,"x":246},"canvasPos":{"w":465.93744,"h":126.33334,"y":9497.031,"x":10959.618}}}}},"meta":{"id":"5816b43de4b05c9fdf39146a","member":"lizc","exportTime":"2016-10-31 16:28:04","diagramInfo":{"category":"mind_free","title":"jQuery-src","created":"2016-10-31 11:02:21","attributes":null,"creator":"lizc","modified":"2016-10-31 16:26:28"},"type":"ProcessOn Schema File","version":"1.0"}}