/**
 * 
 * @authors zc li (lizc@ipanel.cn)
 * @date    2016-12-07 09:08:29
 * @version $Id$
 *
 *
 * 2016/12/7 18:14:12
 * [NEW] 新建
 *
 * ---------------------- 以下记录文件更新记录
 * 
 */

var pc = (function () {

    // 内部全局命名空间
    var UIPC = {

        // 系统时间计时器
        sysTimeTimer: null,

        /*
            播放类型：LiveTV-0, TSTV-1, TVOD-2, VOD-3
            可根据该类型来决定状态控制栏显示的内容
         */
        playType: 0,

        /*
            数据类型：
            0 - 直播列表数据
            1 - 回看列表数据
            2 - 回看日期列表数据
            3 - 回看日期下的节目列表数据

            在使用前先设置数据类型，再显示列表
         */
        dataType: 0,

        // 当前进度条 id
        currProcessId: '',

        // 列表显示行数，默认显示8行
        listLines: 8,

        // 列表焦点行
        currTblFocusLine: 0,

        // 列表第一行数据在数据数组中的索引 
        tblFirstLineIdxInData: 0,

        focusDiv: {

            id: 'lc_focus',
            // 焦点框元素顶部偏移量
            topOffset: -16
        },

        // 播放类型标题
        titles: {
            tvod: '回看播放',
            tstv: '时移播放'
        },

        // 日期列表当前焦点
        dateFocus: 0,

        // 回看日期列表 tr
        tvodDateTr: 'tr&{"prefix":"date_list","height":"80px"}+td&{"width":"172px","background":"url(images/dlist_bg.png) no-repeat center"}',

        // 回看节目列表 tr
        tvodProgTr: 'tr&{"prefix":"prog_list","height":"80px"}+td&{"width":"85px","text-align":"center"}+td&{"width":"221px"}',

        // 频道列表 tr
        chanListTr: 'tr&{"prefix":"chan_list","height":"80px"}+' +
                    'td&{"width":"245px","fontSize":"30px"}+' + 
                    'td&{"width":"245px"}$' +
                    'span&{"fontSize":"20px","color":"#c6d2dd"}',

        // 节目列表水平偏移量
        listTblOffsetX: 172,

        // 分割线
        cutLine: { 

            position: "absolute", 
            top: "-1px", 
            width: "309px", 
            height: "1px", 
            background: ""
        },

        // ids
        ids: {

            // 时间区元素 ID
            date: 'pfg_date',
            time: 'pfg_time',

            // 广告元素 ID
            adWrap: 'ad_wrap', // 广告外层div
            ad: 'ad',

            // 播放列表表格 ID
            plist: 'list',
            plistContainer: 'l_container',
            plistDate: 'lc_date',
            plistProg: 'lc_progs',
            plistChan: 'lc_progs',
            plistProgFocus: 'lc_focus',

            // 频道/节目焦点框
            plistProgFocus: 'lc_focus',
            plistDateFocus: '',

            // 播控状态区元素 ID
            statusCtrl: 'pfg_status',
            statusCtrlL: 'pfgs_left',
            statusCtrlR: 'pfgs_right',

            // 回看时移进度条区元素 id
            tvodTstv: 'pfg_tvodTstv',
            tvodTstvStart: 'pfgt_start',
            tvodTstvEnd: 'pfgt_end',
            tvodTstvStatus: 'pfgt_status',
            tvodTstvProgTitle: 'pfgt_programTitle',
            tvodTstvProgName: 'pfgt_programName',
            tvodTstvProgTime: 'pfgt_programTime',
            tvodTstvProcess: 'pfgt_process',

            // 直播进度条区元素 ID
            chan: 'pf_live',
            chanNo: 'pfl_chanNo',
            chanName: 'pfl_chanName',
            chanIcon: 'pfl_channIcon',
            chanProgTime: 'pfl_progTime',
            chanProgName: 'pfl_progName',
            chanNextProgTime: 'pfl_nextProgTime',
            chanNextProgName: 'pfl_nextProgName',
            chanProcess: 'pfl_process'
        },

        icons: {
            fastIcon: 'images/ctrl_fast.png',
            tvodIcon: 'images/icon_hk.png',
            tvodBigIcon: 'images/icon_hk_big.png',
            tvodBtnIcon: 'images/icon_hk_btn.png',
            goTvodIcon: 'images/left_2tvod.png',
            tstvIcon: 'images/icon_sy.png',
            tstvBigIcon: 'images/icon_sy_big.png',
            goTstvIcon: 'images/enter_tstv.png',
            exitTvodIcon: 'images/exit_tvod.png',
            exitTstvIcon: 'images/exit_tstv.png',
            chanListIcon: 'images/ch_list.png',
            playPauseIcon: 'images/play_pause.png',
            lineIcon: 'images/line03.png'
        },
    };

    // 播放对象
    // mp = new MediaPlayer(), 

    // 当前播放的媒体对象
    // mediaObj = mp.mediaObj,

    // eventpage.htm 页面
    // ep = iPanel.eventFrame;

    /****************************** 1. 按键处理 START ******************************/

    function pcEventHandler( event ) {
        
        var event   = event || window.event,
            keycode = event.which ? event.which : event.keycode;

        switch ( keycode ) {

            // 方向键
            case 37:    // left

                pcDirectionKeyHandler( 'left' );
                return false;
                break;
            case 39:    // right

                pcDirectionKeyHandler( 'right' );
                return false;;
                break;
            case 38:    // up
                
                pcDirectionKeyHandler( 'up' );
                break; 
            case 40:    // down

                pcDirectionKeyHandler( 'down' );
                return false;
                break;
            case 106:   // play or pause

                pcPauseOrPlay();
                break;
            case 13:    // ok

                pcConfirmKeyHandler();
                return false;
                break;
            case 8:

                pcGoBack();
                return false;
                break;
            default:
                return true;
                break;
        }
    }

    function pcDirectionKeyHandler( direction ) {
        
        var directions = [ 'left', 'up', 'right', 'down' ],
            dInt = 0; 

        if ( directions.indexOf( direction ) === -1 ) {
            return false;
        }

        // 左右
        if ( direction === 'up' || direction === 'down' ) {

            dInt = direction === 'up' ? -1 : 1;

            pcKeyUpDownHandler( dInt );
        }

        // 上下
        if ( direction === 'left' || direction === 'right' ) {

            dInt = direction === 'left' ? -1 : 1;

            pcKeyLeftRightHandler( dInt );
        }

        return true;
    }

    /**
     * 左右键处理
     * @param  {[type]} direction [description]
     * @return {[type]}           [description]
     */
    function pcKeyLeftRightHandler( direction ) {
        
        /* TODO
            
            1. 进度条显示时，快进快退，或拖动播放

            2. 频道列表显示时，控制焦点移动
         */
    }

    /**
     * 上下键处理
     * @param  {[type]} direction [description]
     * @return {[type]}           [description]
     */
    function pcKeyUpDownHandler( direction ) {

        var prefix      = UIPC.tbl.trIdPrefix,
            id          = prefix + UIPC.currTblFocusLine,
            oldFocus    = UIPC.currTblFocusLine,
            total       = pcGetData().length,
            lines       = UIPC.listLines,
            tmpV        = 0;

        // console.log( '111 direction = ' + direction + ' - lines: ' + lines + ", focus: " + UIPC.currTblFocusLine + ", idx: " + UIPC.tblFirstLineIdxInData );

        if ( direction > 0 && UIPC.currTblFocusLine === lines - 1 ) {

            if ( UIPC.tblFirstLineIdxInData < total - lines ) {

                UIPC.tblFirstLineIdxInData++;
            } else { // 到尾了

                return;
            }

        } else if ( direction < 0 && UIPC.currTblFocusLine === 0 ) {

            if ( UIPC.tblFirstLineIdxInData > 0 ) {

                UIPC.tblFirstLineIdxInData--;
            } else { // 到头了

                return;
            }
        }

        UIPC.currTblFocusLine += direction;

        if ( UIPC.currTblFocusLine < 0 ) {

            UIPC.currTblFocusLine = 0;
        } else if ( UIPC.currTblFocusLine > lines - 1 ) {

            UIPC.currTblFocusLine = lines - 1;
        }

        id = prefix + UIPC.currTblFocusLine;

        pcGetFocus( id );

        if ( UIPC.currTblFocusLine === 0 || UIPC.currTblFocusLine === lines - 1 ) {

            // console.log( '333333333333333 tblFirstLineIdxInData = ' + UIPC.tblFirstLineIdxInData );
            pcUpdateTblData( UIPC.tblFirstLineIdxInData );
        }

        return true;
    }

    /**
     * 确认键处理
     *
     * 1. 列表页面：播放当前选中行视频
     * 2. 进度条页面：暂停或者不响应
     * 
     * @return {[type]} [description]
     */
    function pcConfirmKeyHandler() {
        
        var id          = UIPC.ids.plist;
            isListShow  = isDivShow( $( id ) );

        if ( isListShow ) {

            // 列表显示的时候，确定去播放

            pcDisplayDiv( id );
        } else { 

            // 列表隐藏的时候，显示列表
            pcShowTable();
        }
    }

    // 显示节目列表或频道列表焦点框
    function pcShowChanFocus() {
        
        pcDisplayDiv( UIPC.focusDiv.id );
    }

    // 隐藏节目列表或频道列表焦点框
    function pcHideChanFocus() {
        
        pcHideDiv( UIPC.focusDiv.id );
    }

    // 元素得到焦点
    function pcGetFocus( id ) {

        var ele         = $( id ),
            focusObj    = UIPC.focusDiv,
            focusDiv    = $( focusObj.id ),
            currFocusLine = UIPC.currTblFocusLine,
            eleH        = ele.style.height;

        eleH = parseInt( eleH.replace( /px/, '' ), 10 );

        focusDiv.style.top = ( eleH * currFocusLine + focusObj.topOffset ) + 'px';
    }

    // 元素失去焦点
    function pcLoseFocus( id ) {

    }

    /****************************** 按键处理 END ******************************/


    /****************************** 2. 获取数据 START ******************************/

    /**
     * 获取直播频道信息
     * @return {[type]} [description]
     */
    function pcGetChannelInfo() {
        
        // TODO

        return pageData;
    }

    /**
     * 获取时移视频数据
     * @return {[type]} [description]
     */
    function pcGetTSTVInfo() {
        
        return {
            name: '我在时移看片',
            start: '10:22',
            end: '12:22',
        };
    }

    /**
     * 获取回看视频数据
     * @return {[type]} [description]
     */
    function pcGetTVODInfo() {
        
        return {
            name: '我在时移看片',
            start: '10:22',
            end: '12:22'
        };
    }


    function setDataType( type ) {
        
        var types = [ 0, 1 ];

        if ( typeof type !== 'number' || types.indexOf( type ) === -1 ) {

            return false;
        }

        UIPC.dataType = type;

        pcShowTable( type );

        return true;
    }

    function getDataType() {
        
        return UIPC.dataType;
    }


    /****************************** 2. 按键处理 START ******************************/


    /****************************** 3. 界面绘制 START ******************************/




    /**
     * 替换元素 innerHTML 内容
     * @param  {String} inner 替换的内容
     * @return {[type]}       [description]
     */
    function pcReplaceInnerHTML( id, inner ) {
        
        if ( typeof id !== 'string' ) {
            return false;
        }

        $( id ).innerHTML = inner;

        return true;
    } 


    /****************************** 界面绘制 END ******************************/


    /****************************** 页面控制 START ******************************/

    /**
     * 从播控页面返回（到播放页面或者其他）
     * @return {[type]} [description]
     */
    function pcGoBack() {
        
        // 其他，如：location 跳转

        // widget 形式，minimize关闭
        ep.hidePlayCtrlPage();
    }


    /****************************** 页面控制 END ******************************/


    /****************************** 4. 初始化工作 START ******************************/

    /**
     * 播控页面关闭时调用，清理数据
     * @return {[type]} [description]
     */
    function destroy() {
        
        // 1. 关闭时间定时器
        clearTimeout( UIPC.sysTimeTimer );

        UIPC = null;
    }

    /**
     * 播控页面初始化处理
     * @return {[type]} [description]
     */
    function init( type ) {

        // 0. 根据类型决定显示那种类型的播放器
        UIPC.playType = type;


        // 更新ID前缀
        pcPrefixValueInit();

        // 1. 更新时间
        pcUpdateCurrentTimeDiv();

        // 2. 更新进度条正文
        pcUpdateProcessCtrlDiv();
    }

    /****************************** 初始化工作 START ******************************/


    /****************************** 5. 播控控制 START ******************************/

    /**
     * 更新节目开始时间
     * @return {[type]} [description]
     */
    function pcUpdateProcessInfo( mp ) {

        switch ( playType ) {
            case 0:     // 直播

                pcUpdateChannelInfo();
                break;
            case 1:     // 时移

                pcUpdateTstvTvodInfo();
                break;
            case 2:     // 回看

                pcUpdateTstvTvodInfo();
                break;
            case 3:     // 直播暂停

                pcUpdateChannelPauseInfo();
                break;
            case 4:     // 直播回看

                pcUpdateChannelTvodInfo();
                break;

            // no default
        }

    }

    /**
     * 更新直播
     * @return {[type]} [description]
     */
    function pcUpdateChannelInfo() {
        
        var chanInfo    = pcGetChannelInfo(),
            ids         = UIPC.ids;

        if ( !chanInfo ) {
            return false;
        }

        pcReplaceInnerHTML( $( ids.chanNo ), chanInfo.No );
        pcReplaceInnerHTML( $( ids.chanName ), chanInfo.name );
        pcReplaceInnerHTML( $( ids.chanProgName ), chanInfo.progName );
        pcReplaceInnerHTML( $( ids.chanProgTime ), chanInfo.progTime );

        return true;
    }


    /**
     * 更新时移或回看
     *
     * @return {[type]} [description]
     */
    function pcUpdateTstvTvodInfo() {
        
        var mediaInfo   = null,
            ids         = UIPC.ids,
            type        = playType;


        // 1 - tstv, 2 - tvod
        mediaInfo = ( type === 1 
                        ? pcGetTSTVInfo()
                        : pcGetTVODInfo() 
                    );

        if ( !mediaInfo ) {
            return false;
        }

        pcReplaceInnerHTML( $( ids.tvodTstvProgName ), mediaInfo.name );
        pcReplaceInnerHTML( $( ids.tvodTstvStart ), mediaInfo.start );
        pcReplaceInnerHTML( $( ids.tvodTstvEnd ), mediaInfo.end );

        return true;
    }

    /**
     * 直播暂停
     * @return {[type]} [description]
     */
    function pcUpdateChannelPauseInfo() {
        
        // TODO
    }
    
    /**
     * 直播回看
     * @return {[type]} [description]
     */
    function pcUpdateChannelTvodInfo() {
        
        // TODO
    }

    /**
     * 播放直播，可从列表播放，也可以从其他页面跳转进来时候调用
     * @param  {[type]} channelID [description]
     * @return {[type]}           [description]
     */
    function pcPlayChannel( channelID ) {

        // TODO 
    }

    /**
     * 播放回看
     * @return {[type]} [description]
     */
    function pcPlayTvod( url ) {
        
        // TODO
    }

    /****************************** 播放控制 END ******************************/

    // 暴露出去的接口
    return {

        /**************** 初始化相关 ****************/

        // 初始化
        init: init,

        /**************** 数据相关 ****************/

        // 设置数据类型
        setDataType: setDataType,

        // 获取数据类型
        getDataType: getDataType,


        /**************** 列表相关 ****************/

        // 创建列表
        table: pcShowTable,


        /**************** 更新相关 ****************/

        // 更新广告
        updateAd: pcUpdateAd,


        /**************** 按键处理相关 ****************/

        // 播控页面事件处理
        eventHandler: pcEventHandler
    };

}());

/*
    该文件使用方法：搭配 ui_playControl.htm 使用

    1. 初始化

 */

// 按键处理
window.document.onkeydown = pc.eventHandler;

window.onload = function () {

    var table = null;

    // 初始化播控页面
    pc.init();

    // 设置列表数据类型
    pc.setDataType( 0 );

    // 根据上一步设置的数据类型自动创建列表
    // table = pc.table();

    // $( 'lc_progs' ).appendChild( table );
};

function $( id ) {

    return document.getElementById( id );
}

function debug( str ) {
    console.log( str );
}